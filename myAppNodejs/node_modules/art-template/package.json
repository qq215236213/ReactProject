{
  "_args": [
    [
      {
        "raw": "art-template",
        "scope": null,
        "escapedName": "art-template",
        "name": "art-template",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "C:\\Users\\aoyo\\Desktop\\myApp"
    ]
  ],
  "_cnpm_publish_time": 1494475758003,
  "_from": "art-template",
  "_hasShrinkwrap": false,
  "_id": "art-template@4.9.1",
  "_location": "/art-template",
  "_nodeVersion": "7.10.0",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/art-template-4.9.1.tgz_1494475757729_0.024251082446426153"
  },
  "_npmUser": {
    "name": "aui",
    "email": "1987.tangbin@gmail.com"
  },
  "_npmVersion": "4.2.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "art-template",
    "scope": null,
    "escapedName": "art-template",
    "name": "art-template",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "http://registry.npm.taobao.org/art-template/download/art-template-4.9.1.tgz",
  "_shasum": "476b60c406477afc31e272e27e9c941a2854a0d7",
  "_shrinkwrap": null,
  "_spec": "art-template",
  "_where": "C:\\Users\\aoyo\\Desktop\\myApp",
  "author": {
    "name": "tangbin",
    "email": "sugarpie.tang@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/aui/art-template/issues"
  },
  "dependencies": {
    "acorn": "^5.0.3",
    "detect-node": "^2.0.3",
    "escodegen": "^1.8.1",
    "estraverse": "^4.2.0",
    "html-minifier": "^3.4.3",
    "is-keyword-js": "^1.0.3",
    "js-tokens": "^3.0.1",
    "merge-source-map": "^1.0.3",
    "source-map": "^0.5.6"
  },
  "description": "JavaScript Template Engine",
  "devDependencies": {
    "babel-cli": "^6.24.1",
    "babel-core": "^6.24.0",
    "babel-preset-es2015": "^6.24.1",
    "babel-preset-es2015-loose": "^8.0.0",
    "coveralls": "^2.13.0",
    "eslint": "^3.19.0",
    "eslint-loader": "^1.7.1",
    "istanbul": "^0.4.5",
    "mocha": "^3.2.0",
    "node-noop": "^1.0.0",
    "webpack": "^2.3.2"
  },
  "directories": {},
  "dist": {
    "shasum": "476b60c406477afc31e272e27e9c941a2854a0d7",
    "size": 27997,
    "noattachment": false,
    "tarball": "http://registry.npm.taobao.org/art-template/download/art-template-4.9.1.tgz"
  },
  "engines": {
    "node": ">= 1.0.0"
  },
  "files": [
    "lib/"
  ],
  "gitHead": "2a5056f501b1f0b2566ad5c7a41aa3c1f46d991f",
  "homepage": "http://aui.github.com/art-template/",
  "keywords": [
    "template"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "aui",
      "email": "1987.tangbin@gmail.com"
    }
  ],
  "name": "art-template",
  "optionalDependencies": {},
  "publish_time": 1494475758003,
  "readme": "# art-template\n\n[![NPM Version](https://img.shields.io/npm/v/art-template.svg)](https://npmjs.org/package/art-template)\n[![NPM Downloads](http://img.shields.io/npm/dm/art-template.svg)](https://npmjs.org/package/art-template)\n[![Node.js Version](https://img.shields.io/node/v/art-template.svg)](http://nodejs.org/download/)\n[![Travis-ci](https://travis-ci.org/aui/art-template.svg?branch=master)](https://travis-ci.org/aui/art-template)\n[![Coverage Status](https://coveralls.io/repos/github/aui/art-template/badge.svg?branch=master)](https://coveralls.io/github/aui/art-template?branch=master)\n\nart-template 是一个渲染性能出众模板引擎，无论在 NodeJS 还是在浏览器中都可以运行。\n\n[![chart](https://cloud.githubusercontent.com/assets/1791748/25769656/13d09cb2-3252-11e7-9b31-b91110908bce.png)](https://aui.github.io/art-template/example/web-test-speed/)\n\n[在线速度测试](https://aui.github.io/art-template/example/web-test-speed/)\n\n## 特性\n\n* 拥有接近 JavaScript 渲染极限的的性能\n* 调试友好：语法、运行时错误日志精确到模板所在行；支持支持在模板文件上打断点（Webpack Loader）\n* 支持压缩输出页面中的 HTML、CSS、JS 代码\n* 支持 Express、Koa、Webpack\n* 支持模板继承与子模板\n* 兼容 [EJS](http://ejs.co)、[Underscore](http://underscorejs.org/#template)、[LoDash](https://lodash.com/docs/#template) 模板语法\n* 模板编译后的代码支持在严格模式下运行\n* 支持 JavaScript 语句与模板语法混合书写\n* 支持自定义模板的语法解析规则\n* 浏览器版本仅 6KB 大小\n\n[art-template@4 新特性详细介绍](https://github.com/aui/art-template/issues/369)\n\n## 快速入门\n\n### 模板语法\n\n```html\n{{if user}}\n  <h2>{{user.name}}</h2>\n{{/if}}\n\n或：\n\n<% if (user) { %>\n  <h2><%= user.name %></h2>\n<% } %>\n```\n\n### NodeJS\n\n```js\nvar template = require('art-template');\nvar html = template(__dirname + '/tpl-user.art', {\n    user: {\n        name: 'aui'\n    }\n});\n```\n\n### 浏览器\n\n```html\n<script src=\"lib/template-web.js\"></script>\n<script id=\"tpl-user\" type=\"text/html\">\n{{if user}}\n  <h2>{{user.name}}</h2>\n{{/if}}\n</script>\n```\n\n```js\nvar html = template('tpl-user', {\n    user: {\n        name: 'aui'\n    }\n});\n```\n\n### 核心方法\n\n```js\n// 基于模板名渲染模板\ntemplate(filename, data);\n\n// 将模板源代码编译成函数\ntemplate.compile(source, options);\n\n// 将模板源代码编译成函数并立刻执行\ntemplate.render(source, data, options);\n```\n\n## 安装\n\n### Npm\n\n```shell\nnpm install art-template --save\n```\n\n### 浏览器\n\n下载：[lib/template-web.js](https://raw.githubusercontent.com/aui/art-template/master/lib/template-web.js)\n\n### Express\n\n主页：[express-art-template](https://github.com/aui/express-art-template)\n\n### Koa\n\n主页：[koa-art-template](https://github.com/aui/koa-art-template)\n\n### Webpack\n\n主页：[art-template-loader](https://github.com/aui/art-template-loader)\n\n## 语法\n\nart-template 同时支持 `{{expression}}` 简约语法与任意 JavaScript 表达式 `<% expression %>`。\n\n### 输出\n\n**1\\. 标准输出**\n\n```html\n{{value}}\n{{data.key}}\n{{data['key']}}\n{{a ? b : c}}\n{{a || b}}\n{{a + b}}\n\n或\n\n<%= value %>\n<%= data.key %>\n<%= data['key'] %>\n<%= a ? b : c %>\n<%= a || b %>\n<%= a + b %>\n```\n\n模板一级特殊变量可以使用 `$data` 加下标的方式访问：\n\n```\n{{$data['user list']}}\n```\n\n**2\\. 原始输出**\n\n```html\n{{@value}}\n\n或\n\n<%- value %>\n```\n\n原始输出语句不会对 `HTML` 内容进行转义\n\n### 条件\n\n```html\n{{if value}} ... {{/if}}\n{{if v1}} ... {{else if v2}} ... {{/if}}\n\n或\n\n<% if (value) { %> ... <% } %>\n<% if (value) { %> ... <% } else { %> ... <% } %>\n```\n\n### 循环\n\n```html\n{{each target}}\n    {{$index}} {{$value}}\n{{/each}}\n\n或\n\n<% for(var i = 0; i < target.length; i++){ %>\n    <%= i %> <%= target[i] %>\n<% } %>\n```\n\n1. `target` 支持 `Array` 与 `Object` 的迭代，其默认值为 `$data`\n2. `$value` 与 `$index` 可以自定义：`{{each target val key}}`\n\n### 变量\n\n```html\n{{set temp = data.sub.content}}\n\n或\n\n<% var temp = data.sub.content; %> \n```\n\n### 模板继承\n\n```html\n{{extend './layout.art'}}\n{{block 'head'}} ... {{/block}}\n\n或\n\n<% extend('./layout.art') %>\n<% block('head', function(){ %> ... <% }) %>\n```\n\n模板继承允许你构建一个包含你站点共同元素的基本模板“骨架”。\n\n#### 范例\n\nlayout.art:\n\n```html\n<!doctype html>\n<html>\n<head>\n    <meta charset=\"utf-8\">\n    <title>{{block 'title'}}My Site{{/block}}</title>\n\n    {{block 'head'}}\n    <link rel=\"stylesheet\" href=\"main.css\">\n    {{/block}}\n</head>\n<body>\n    {{block 'content'}}{{/block}}\n</body>\n</html>\n```\n\nindex.art:\n\n```html\n{{extend './layout.art'}}\n\n{{block 'title'}}{{title}}{{/block}}\n\n{{block 'head'}}\n    <link rel=\"stylesheet\" href=\"custom.css\">\n{{/block}}\n\n{{block 'content'}}\n<p>This is just an awesome page.</p>\n{{/block}}\n```\n\n渲染 index.art 后，将自动应用布局骨架。\n\n### 子模板\n\n```html\n{{include './header.art'}}\n{{include './header.art' data}}\n\n或\n\n<% include('./header.art') %>\n<% include('./header.art', data) %>\n```\n\n`include` 第二个参数默认值为 `$data`。\n\n### print\n\n```html\n<% print(val, val2, val3) %>\n```\n\n### 过滤器\n\n```js\n// 向模板中导入变量\ntemplate.defaults.imports.dateFormat = function(date, format){/*[code..]*/};\ntemplate.defaults.imports.timestamp = function(value){return value * 1000};\n```\n\n```html\n{{date | timestamp | dateFormat 'yyyy-MM-dd hh:mm:ss'}}\n\n或\n\n<%= $imports.dateFormat($imports.timestamp(date), 'yyyy-MM-dd hh:mm:ss') %>\n```\n\n`{{value | filter}}` 过滤器语法类似管道操作符，它的上一个输出作为下一个输入。\n\n## 压缩 HTML、CSS、JS\n\n```js\ntemplate.defaults.minimize = true;\n```\n\nart-template 的页面压缩功能是在编译阶段实现的，因此完全不影响渲染速度，并且能够加快网络传输速度。但也有一个限制，它会尝试“优化”未闭合的 HTML 标签，因此请避免书写这样没有正确闭合的模板\b\b：\n\n```html\n<body>\n```\n或：\n\n```html\n</body></html>\n```\n\n使用子模板载入网页头与底公共部分的时候很容易出现此问题，解决方案是使用 [模板继承](#模板继承) 代替子模板。\n\n## 调试\n\n设置 `template.defaults.debug=true` 后，它会设置如下 [选项](#选项)：\n\n```json\n{\n    \"bail\": false,\n    \"cache\": false,\n    \"minimize\": false,\n    \"compileDebug\": true\n}\n```\n\n`debug` 默认配置：\n\n* Node 环境 = `process.env.NODE_ENV !== 'production'`\n* 浏览器环境 = `false`\n\n## 全局变量\n\n模板通过 `$imports` 可以访问到模板外部的全局变量。\n\n### 内置变量清单\n\n* `$data`     传入模板的数据\n* `$imports`  外部导入的变量\b以及全局变量\n* `print`     字符串输出函数\n* `include`   子模板载入函数\n* `extend`    模板继承模板导入函数\n* `block`     模板块声明函数\n\n### 导入变量\n\n```js\ntemplate.defaults.imports.log = console.log;\n```\n\n```html\n<% $imports.log('hello world') %>\n```\n\n## 配置语法规则\n\n### 修改界定符\n\nart-template 支持修改默认模板界定符 `{{` `}}` 与 `<%` `%>`：\n\n```js\n// 原生语法的界定符规则\ntemplate.defaults.rules[0].test = /<%(#?)((?:==|=#|[=-])?)([\\w\\W]*?)(-?)%>/;\n// 简洁语法的界定符规则\ntemplate.defaults.rules[1].test = /{{[ \\t]*([@#]?)(\\/?)([\\w\\W]*?)[ \\t]*}}/;\n```\n\n它们是一个正则表达式，你可以只修改界定符部分。例如修改 `<%` `%>` 为 `<?` `?>`：\n\n```js\nvar rule = template.defaults.rules[0];\nrule.test = new RegExp(rules.test.source.replace('<%', '<?').replace('%>', '?>'));\n```\n\n### 添加语法\n\n从一个简单的例子说起，让模板引擎支持 ES6 `${name}` 模板字符串的解析：\n\n```js\ntemplate.defaults.rules.push({\n    test: /\\${([\\w\\W]*?)}/,\n    use: function(match, code) {\n        return {\n            code: code,\n            output: 'escape'\n        }\n    }\n});\n```\n\n其中 `test` 是匹配字符串正则，`use` 是匹配后的调用函数。关于 `use` 函数：\n\n* 参数：一个参数为匹配到的字符串，其余的参数依次接收 `test` 正则的分组匹配内容\n* 返回值：必须返回一个对象，包含 `code` 与 `output` 两个字段：\n    * `code` 转换后的 JavaScript 语句\n    * `output` 描述 `code` 的类型，可选值：\n        * `'escape'` 编码后进行输出\n        * `'raw'` 输出原始内容\n        * `false` 不输出任何内容\n\n值得一提的是，语法规则对渲染速度没有影响，模板引擎编译器会帮你优化渲染性能。\n\n## 使用 `require(templatePath)`\n\n加载 `.art` 模板：\n\n```js\nvar template = require('art-template');\nvar view = require('./index.art');\nvar html = view(data); \n```\n\n加载 `.ejs` 模板：\n\n```js\nvar template = require('art-template');\nrequire.extensions['.ejs'] = template.extension;\n\nvar view = require('./index.ejs');\nvar html = view(data); \n```\n\n需要注意的是：此功能仅对 NodeJS 生效，如果要在浏览器中使用模板文件渲染功能，请使用 Webpack [art-template-loader](https://github.com/aui/art-template-loader)。\n\n## API\n\n###\ttemplate(filename, data)\n\n根据模板名渲染模板。\n\n```js\nvar html = template('/welcome.art', {\n    value: 'aui'\n});\n```\n\n> 在浏览器中，`filename` 请传入存放模板的元素 `id`\n\n###\ttemplate(filename, source)\n\n编译模板并缓存。\n\n```js\n// compile && cache\ntemplate('/welcome.art', 'hi, <%=value%>.');\n\n// use\ntemplate('/welcome.art', {\n    value: 'aui'\n});\n```\n\n###\t.compile(source, options)\n\n编译模板并返回一个渲染函数。\n\n```js\nvar render = template.compile('hi, <%=value%>.');\nvar html = render({value: 'aui'});\n```\n\n###\t.render(source, data, options)\n\n编译并返回渲染结果。\n\n```js\nvar html = template.render('hi, <%=value%>.', {value: 'aui'});\n```\n\n###\t.defaults\n\n模板引擎默认配置。参考 [选项](#选项)。\n\n## 选项\n\n`template.defaults`\n\n```js\n    // 模板名\n    filename: null,\n\n    // 模板语法规则列表\n    rules: [nativeRule, artRule],\n\n    // 是否开启对模板输出语句自动编码功能。为 false 则关闭编码输出功能\n    // escape 可以防范 XSS 攻击\n    escape: true,\n\n    // 是否开启调试模式。如果为 true: {bail:false, cache:false, minimize:false, compileDebug:true}\n    debug: detectNode ? process.env.NODE_ENV !== 'production' : false,\n\n    // bail 如果为 true，编译错误与运行时错误都会抛出异常\n    bail: false,\n\n    // 是否开启缓存\n    cache: true,\n\n    // 是否开启压缩。它会运行 htmlMinifier，将页面 HTML、CSS、CSS 进行压缩输出\n    // 如果模板包含没有闭合的 HTML 标签，请不要打开 minimize，否则可能被 htmlMinifier 修复或过滤\n    minimize: true,\n\n    // 是否编译调试版。编译为调试版本可以在运行时进行 DEBUG\n    compileDebug: false,\n\n    // 模板路径转换器\n    resolveFilename: resolveFilename,\n\n    // HTML 压缩器。仅在 NodeJS 环境下有效\n    htmlMinifier: htmlMinifier,\n\n    // HTML 压缩器配置。参见 https://github.com/kangax/html-minifier\n    htmlMinifierOptions: {\n        collapseWhitespace: true,\n        minifyCSS: true,\n        minifyJS: true,\n        // 运行时自动合并：rules.map(rule => rule.test)\n        ignoreCustomFragments: []\n    },\n\n    // 错误事件。仅在 bail 为 false 时生效\n    onerror: onerror,\n\n    // 模板文件加载器\n    loader: loader,\n\n    // 缓存中心适配器（依赖 filename 字段）\n    caches: caches,\n\n    // 模板根目录。如果 filename 字段不是本地路径，则在 root 查找模板\n    root: '/',\n\n    // 默认后缀名。如果没有后缀名，则会自动添加 extname\n    extname: '.art',\n\n    // 忽略的变量。被模板编译器忽略的模板变量列表\n    ignore: [],\n\n    // 导入的模板变量\n    imports: runtime\n```\n\n## 兼容性\n\n1. NodeJS v1.0+\n2. IE8+（IE8 需要 [es5-shim](https://github.com/es-shims/es5-shim)，[示例](./example/web-ie-compatible/index.html)）\n\n## 授权协议\n\n[MIT](./LICENSE)\n\n------------------\n\n<img width=\"128\" src=\"https://cloud.githubusercontent.com/assets/1791748/25561320/09c9d6d0-2d9c-11e7-8689-1109f3f88f41.png\" alt=\"微信支付\" />\n\n赞助 art-template 持续优化\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/aui/art-template.git"
  },
  "scripts": {
    "build": "npm run build-lib && npm run build-web",
    "build-lib": "rm -rf lib && babel src --out-dir lib --presets=es2015-loose",
    "build-web": "export NODE_ENV=production && webpack",
    "coverage": "cat ./coverage/lcov.info | coveralls",
    "dev": "babel src --watch --out-dir lib --presets=es2015-loose",
    "test": "export NODE_ENV=production && istanbul cover node_modules/mocha/bin/_mocha -- --ui exports --colors 'test/**/*.js'"
  },
  "version": "4.9.1"
}
